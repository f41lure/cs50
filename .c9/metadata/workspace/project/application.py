{"filter":false,"title":"application.py","tooltip":"/project/application.py","undoManager":{"mark":33,"position":33,"stack":[[{"start":{"row":0,"column":0},"end":{"row":283,"column":43},"action":"insert","lines":["from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session, url_for","from flask_session import Session","from passlib.apps import custom_app_context as pwd_context","from tempfile import mkdtemp","import re","from helpers import *","","# configure application","app = Flask(__name__)","","# ensure responses aren't cached","if app.config[\"DEBUG\"]:","    @app.after_request","    def after_request(response):","        response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","        response.headers[\"Expires\"] = 0","        response.headers[\"Pragma\"] = \"no-cache\"","        return response","","# custom filter","app.jinja_env.filters[\"usd\"] = usd","","# configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = mkdtemp()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","@app.route(\"/\")","@login_required","def index():","","    data = db.execute(\"\"\"SELECT * FROM record WHERE id = :id\"\"\", id=session[\"user_id\"])","    grand_tot = 0","    cash_info = db.execute(\"SELECT cash FROM users WHERE id = :id\", id=session[\"user_id\"])","    for row in data:","        symbol = row[\"stock\"]","        shares = row[\"amount\"]","        stock = lookup(symbol)","        total = shares * float(stock[\"price\"])","        grand_tot += total","        db.execute(\"UPDATE record SET price=:price, \\","                    value=:total WHERE id=:id AND stock=:symbol\", \\","                    price=usd(stock[\"price\"]), \\","                    total=usd(total), id=session[\"user_id\"], symbol=symbol)","    grand_tot += cash_info[0][\"cash\"]","    new_data = db.execute(\"SELECT * from record \\","                                    WHERE id=:id\", id=session[\"user_id\"])","    return render_template(\"index.html\", stocks=new_data, cash = usd(cash_info[0][\"cash\"]), total = usd(grand_tot))","","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def buy():","    \"\"\"Buy shares of stock.\"\"\"","    if request.method == \"POST\":","        if not request.form.get(\"symbol\"):","            return apology(\"Enter a symbol.\")","        symb = lookup(request.form.get(\"symbol\"))","","        if not symb:","            return apology(\"Invalid symbol. Re-enter.\")","","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","","","        cash_info = db.execute(\"SELECT cash FROM users WHERE id = :id\", id=session[\"user_id\"])","        if float(cash_info[0][\"cash\"]) < symb[\"price\"] * shares:","            return apology(\"Not enough funds.\")","","        name_of_us = db.execute(\"\"\"SELECT * FROM users WHERE id = :id\"\"\", id=session[\"user_id\"])","","        name = name_of_us[0][\"username\"]","","        db.execute(\"UPDATE users SET cash = cash - :purchase WHERE id = :id\", id=session[\"user_id\"], purchase=symb[\"price\"] * float(shares))","","        new_cash = db.execute(\"SELECT * FROM users WHERE id = :id\", id=session[\"user_id\"])","","        foo = new_cash[0][\"cash\"]","","","","        # Table which records all transactions ever made","","        db.execute(\"\"\"INSERT INTO trans (id, stock, shares, total, type)","                      VALUES (:id, :stock, :shares, :total, :type)\"\"\",","                    id=session.get(\"user_id\"),","                    stock=request.form.get(\"symbol\"),","                    shares=shares,","                    total = symb[\"price\"] * shares,","                    type=\"buy\")","","        previous_shares = db.execute(\"\"\"SELECT amount FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","        previous_value = db.execute(\"\"\"SELECT value FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","","        if not previous_shares:","            db.execute(\"\"\"INSERT INTO record (id, stock, amount, price, value)","                          VALUES (:id, :stock, :amount, :price, :value)\"\"\",","                        id=session.get(\"user_id\"),","                        stock=request.form.get(\"symbol\"),","                        amount=shares,","                        price=symb[\"price\"],","                        value = symb[\"price\"] * shares)","        else:","            new_amount = int(previous_shares[0][\"amount\"]) + shares","            new_value = int(previous_value[0][\"value\"] + symb[\"price\"]) * shares","","            db.execute(\"\"\"UPDATE record SET amount = :amount WHERE id = :id AND stock = :stock\"\"\", amount = new_amount, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","            db.execute(\"\"\"UPDATE record SET value = :value WHERE id = :id AND stock = :stock\"\"\", value = new_value, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","","        return redirect(url_for(\"index\"))","","    else:","        return render_template(\"buy.html\")","","@app.route(\"/history\")","@login_required","def history():","    histories = db.execute(\"SELECT * from trans WHERE id=:id\", id=session[\"user_id\"])","","    return render_template(\"history.html\", trans=histories)","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in.\"\"\"","","    # forget any user_id","    session.clear()","","    # if user reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"must provide username\")","","        # ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"must provide password\")","","        # query database for username","        rows = db.execute(\"SELECT * FROM users WHERE username = :username\", username=request.form.get(\"username\"))","","        # ensure username exists and password is correct","        if len(rows) != 1 or not pwd_context.verify(request.form.get(\"password\"), rows[0][\"hash\"]):","            return apology(\"invalid username and/or password\")","","        # remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # redirect user to home page","        return redirect(url_for(\"index\"))","","    # else if user reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out.\"\"\"","","    # forget any user_id","    session.clear()","","    # redirect user to login form","    return redirect(url_for(\"login\"))","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","    \"\"\"Get stock quote.\"\"\"","    if request.method == \"POST\":","        symbol = lookup(request.form.get(\"symbol\"))","        if not symbol:","            return apology(\"Invalid symbol. Please re-enter.\")","        return render_template(\"quoted.html\", stock=usd(symbol))","","    elif request.method == \"GET\":","        return render_template(\"quote.html\")","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","","    if request.method == \"POST\":","        if not request.form.get(\"username\") or not request.form.get(\"password\") or request.form.get(\"password\") != request.form.get(\"confirmation\"):","            return apology(\"retry\", 400)","","        # insert the new user into users, storing the hash of the user's password","        result = db.execute(\"INSERT INTO users (username, hash, cash) \\","                             VALUES(:username, :hash, :cash)\", \\","                             username=request.form.get(\"username\"), \\","                             hash=pwd_context.hash(request.form.get(\"password\")), \\","                             cash=10000)","","        if not result:","            return apology(\"Username already exist\")","","        # remember which user has logged in","        session[\"user_id\"] = result","","        # redirect user to home page","        return redirect(url_for(\"index\"))","","    else:","        return render_template(\"register.html\")","","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():","    \"\"\"Sell shares of stock.\"\"\"","    if request.method == \"POST\":","        if not request.form.get(\"symbol\"):","            return apology(\"Enter a symbol.\")","        symb = lookup(request.form.get(\"symbol\"))","","        if not symb:","            return apology(\"Invalid symbol. Re-enter.\")","","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","","","        cash_info = db.execute(\"SELECT cash FROM users WHERE id = :id\", id=session[\"user_id\"])","","","        name_of_us = db.execute(\"\"\"SELECT * FROM users WHERE id = :id\"\"\", id=session[\"user_id\"])","","        name = name_of_us[0][\"username\"]","","        db.execute(\"UPDATE users SET cash = cash + :purchase WHERE id = :id\", id=session[\"user_id\"], purchase=symb[\"price\"] * float(shares))","","        new_cash = db.execute(\"SELECT * FROM users WHERE id = :id\", id=session[\"user_id\"])","","        foo = new_cash[0][\"cash\"]","","","","        # Table which records all transactions ever made","","        db.execute(\"\"\"INSERT INTO trans (id, stock, shares, total, type)","                      VALUES (:id, :stock, :shares, :total, :type)\"\"\",","                    id=session.get(\"user_id\"),","                    stock=request.form.get(\"symbol\"),","                    shares=shares,","                    total = symb[\"price\"] * shares,","                    type=\"sell\")","","        previous_shares = db.execute(\"\"\"SELECT amount FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","        previous_value = db.execute(\"\"\"SELECT value FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","","        if not previous_shares:","            # db.execute(\"\"\"INSERT INTO record (id, stock, amount, price, value)","            #               VALUES (:id, :stock, :amount, :price, :value)\"\"\",","            #             id=session.get(\"user_id\"),","            #             stock=request.form.get(\"symbol\"),","            #             amount=shares,","            #             price=symb[\"price\"],","            #             value = symb[\"price\"] * shares)","            return apology(\"Can't sell something you don't have\", 400)","","        else:","            new_amount = int(previous_shares[0][\"amount\"]) - shares","            new_value = float(float(previous_value[0][\"value\"][1:]) - symb[\"price\"]) * shares","","            db.execute(\"\"\"UPDATE record SET amount = :amount WHERE id = :id AND stock = :stock\"\"\", amount = new_amount, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","            db.execute(\"\"\"UPDATE record SET value = :value WHERE id = :id AND stock = :stock\"\"\", value = new_value, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","","        return redirect(url_for(\"index\"))","","    else:","        return render_template(\"sell.html\")"],"id":1}],[{"start":{"row":218,"column":0},"end":{"row":283,"column":43},"action":"remove","lines":["    \"\"\"Sell shares of stock.\"\"\"","    if request.method == \"POST\":","        if not request.form.get(\"symbol\"):","            return apology(\"Enter a symbol.\")","        symb = lookup(request.form.get(\"symbol\"))","","        if not symb:","            return apology(\"Invalid symbol. Re-enter.\")","","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","","","        cash_info = db.execute(\"SELECT cash FROM users WHERE id = :id\", id=session[\"user_id\"])","","","        name_of_us = db.execute(\"\"\"SELECT * FROM users WHERE id = :id\"\"\", id=session[\"user_id\"])","","        name = name_of_us[0][\"username\"]","","        db.execute(\"UPDATE users SET cash = cash + :purchase WHERE id = :id\", id=session[\"user_id\"], purchase=symb[\"price\"] * float(shares))","","        new_cash = db.execute(\"SELECT * FROM users WHERE id = :id\", id=session[\"user_id\"])","","        foo = new_cash[0][\"cash\"]","","","","        # Table which records all transactions ever made","","        db.execute(\"\"\"INSERT INTO trans (id, stock, shares, total, type)","                      VALUES (:id, :stock, :shares, :total, :type)\"\"\",","                    id=session.get(\"user_id\"),","                    stock=request.form.get(\"symbol\"),","                    shares=shares,","                    total = symb[\"price\"] * shares,","                    type=\"sell\")","","        previous_shares = db.execute(\"\"\"SELECT amount FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","        previous_value = db.execute(\"\"\"SELECT value FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","","        if not previous_shares:","            # db.execute(\"\"\"INSERT INTO record (id, stock, amount, price, value)","            #               VALUES (:id, :stock, :amount, :price, :value)\"\"\",","            #             id=session.get(\"user_id\"),","            #             stock=request.form.get(\"symbol\"),","            #             amount=shares,","            #             price=symb[\"price\"],","            #             value = symb[\"price\"] * shares)","            return apology(\"Can't sell something you don't have\", 400)","","        else:","            new_amount = int(previous_shares[0][\"amount\"]) - shares","            new_value = float(float(previous_value[0][\"value\"][1:]) - symb[\"price\"]) * shares","","            db.execute(\"\"\"UPDATE record SET amount = :amount WHERE id = :id AND stock = :stock\"\"\", amount = new_amount, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","            db.execute(\"\"\"UPDATE record SET value = :value WHERE id = :id AND stock = :stock\"\"\", value = new_value, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","","        return redirect(url_for(\"index\"))","","    else:","        return render_template(\"sell.html\")"],"id":2}],[{"start":{"row":197,"column":62},"end":{"row":197,"column":68},"action":"remove","lines":[", cash"],"id":3}],[{"start":{"row":198,"column":52},"end":{"row":198,"column":59},"action":"remove","lines":[", :cash"],"id":4}],[{"start":{"row":201,"column":0},"end":{"row":201,"column":39},"action":"remove","lines":["                             cash=10000"],"id":5}],[{"start":{"row":200,"column":83},"end":{"row":201,"column":0},"action":"remove","lines":["",""],"id":6}],[{"start":{"row":200,"column":82},"end":{"row":200,"column":83},"action":"remove","lines":["\\"],"id":7}],[{"start":{"row":200,"column":81},"end":{"row":200,"column":82},"action":"remove","lines":[" "],"id":8}],[{"start":{"row":200,"column":80},"end":{"row":200,"column":81},"action":"remove","lines":[","],"id":9}],[{"start":{"row":200,"column":80},"end":{"row":200,"column":81},"action":"insert","lines":[")"],"id":10}],[{"start":{"row":58,"column":1},"end":{"row":122,"column":42},"action":"remove","lines":["   \"\"\"Buy shares of stock.\"\"\"","    if request.method == \"POST\":","        if not request.form.get(\"symbol\"):","            return apology(\"Enter a symbol.\")","        symb = lookup(request.form.get(\"symbol\"))","","        if not symb:","            return apology(\"Invalid symbol. Re-enter.\")","","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","","","        cash_info = db.execute(\"SELECT cash FROM users WHERE id = :id\", id=session[\"user_id\"])","        if float(cash_info[0][\"cash\"]) < symb[\"price\"] * shares:","            return apology(\"Not enough funds.\")","","        name_of_us = db.execute(\"\"\"SELECT * FROM users WHERE id = :id\"\"\", id=session[\"user_id\"])","","        name = name_of_us[0][\"username\"]","","        db.execute(\"UPDATE users SET cash = cash - :purchase WHERE id = :id\", id=session[\"user_id\"], purchase=symb[\"price\"] * float(shares))","","        new_cash = db.execute(\"SELECT * FROM users WHERE id = :id\", id=session[\"user_id\"])","","        foo = new_cash[0][\"cash\"]","","","","        # Table which records all transactions ever made","","        db.execute(\"\"\"INSERT INTO trans (id, stock, shares, total, type)","                      VALUES (:id, :stock, :shares, :total, :type)\"\"\",","                    id=session.get(\"user_id\"),","                    stock=request.form.get(\"symbol\"),","                    shares=shares,","                    total = symb[\"price\"] * shares,","                    type=\"buy\")","","        previous_shares = db.execute(\"\"\"SELECT amount FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","        previous_value = db.execute(\"\"\"SELECT value FROM record WHERE stock = :stock AND id = :id\"\"\", stock=request.form.get(\"symbol\"), id=session[\"user_id\"])","","        if not previous_shares:","            db.execute(\"\"\"INSERT INTO record (id, stock, amount, price, value)","                          VALUES (:id, :stock, :amount, :price, :value)\"\"\",","                        id=session.get(\"user_id\"),","                        stock=request.form.get(\"symbol\"),","                        amount=shares,","                        price=symb[\"price\"],","                        value = symb[\"price\"] * shares)","        else:","            new_amount = int(previous_shares[0][\"amount\"]) + shares","            new_value = int(previous_value[0][\"value\"] + symb[\"price\"]) * shares","","            db.execute(\"\"\"UPDATE record SET amount = :amount WHERE id = :id AND stock = :stock\"\"\", amount = new_amount, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","            db.execute(\"\"\"UPDATE record SET value = :value WHERE id = :id AND stock = :stock\"\"\", value = new_value, id=session[\"user_id\"], stock=request.form.get(\"symbol\"))","","        return redirect(url_for(\"index\"))","","    else:","        return render_template(\"buy.html\")"],"id":11}],[{"start":{"row":58,"column":0},"end":{"row":58,"column":1},"action":"remove","lines":[" "],"id":12}],[{"start":{"row":35,"column":0},"end":{"row":52,"column":115},"action":"remove","lines":["","    data = db.execute(\"\"\"SELECT * FROM record WHERE id = :id\"\"\", id=session[\"user_id\"])","    grand_tot = 0","    cash_info = db.execute(\"SELECT cash FROM users WHERE id = :id\", id=session[\"user_id\"])","    for row in data:","        symbol = row[\"stock\"]","        shares = row[\"amount\"]","        stock = lookup(symbol)","        total = shares * float(stock[\"price\"])","        grand_tot += total","        db.execute(\"UPDATE record SET price=:price, \\","                    value=:total WHERE id=:id AND stock=:symbol\", \\","                    price=usd(stock[\"price\"]), \\","                    total=usd(total), id=session[\"user_id\"], symbol=symbol)","    grand_tot += cash_info[0][\"cash\"]","    new_data = db.execute(\"SELECT * from record \\","                                    WHERE id=:id\", id=session[\"user_id\"])","    return render_template(\"index.html\", stocks=new_data, cash = usd(cash_info[0][\"cash\"]), total = usd(grand_tot))"],"id":13}],[{"start":{"row":40,"column":6},"end":{"row":40,"column":7},"action":"remove","lines":["y"],"id":14}],[{"start":{"row":40,"column":5},"end":{"row":40,"column":6},"action":"remove","lines":["u"],"id":15}],[{"start":{"row":40,"column":4},"end":{"row":40,"column":5},"action":"remove","lines":["b"],"id":16}],[{"start":{"row":0,"column":0},"end":{"row":136,"column":0},"action":"remove","lines":["from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session, url_for","from flask_session import Session","from passlib.apps import custom_app_context as pwd_context","from tempfile import mkdtemp","import re","from helpers import *","","# configure application","app = Flask(__name__)","","# ensure responses aren't cached","if app.config[\"DEBUG\"]:","    @app.after_request","    def after_request(response):","        response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","        response.headers[\"Expires\"] = 0","        response.headers[\"Pragma\"] = \"no-cache\"","        return response","","# custom filter","app.jinja_env.filters[\"usd\"] = usd","","# configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = mkdtemp()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","@app.route(\"/\")","@login_required","def index():","","","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def ():","","","@app.route(\"/history\")","@login_required","def history():","    histories = db.execute(\"SELECT * from trans WHERE id=:id\", id=session[\"user_id\"])","","    return render_template(\"history.html\", trans=histories)","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in.\"\"\"","","    # forget any user_id","    session.clear()","","    # if user reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"must provide username\")","","        # ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"must provide password\")","","        # query database for username","        rows = db.execute(\"SELECT * FROM users WHERE username = :username\", username=request.form.get(\"username\"))","","        # ensure username exists and password is correct","        if len(rows) != 1 or not pwd_context.verify(request.form.get(\"password\"), rows[0][\"hash\"]):","            return apology(\"invalid username and/or password\")","","        # remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # redirect user to home page","        return redirect(url_for(\"index\"))","","    # else if user reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out.\"\"\"","","    # forget any user_id","    session.clear()","","    # redirect user to login form","    return redirect(url_for(\"login\"))","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","    \"\"\"Get stock quote.\"\"\"","    if request.method == \"POST\":","        symbol = lookup(request.form.get(\"symbol\"))","        if not symbol:","            return apology(\"Invalid symbol. Please re-enter.\")","        return render_template(\"quoted.html\", stock=usd(symbol))","","    elif request.method == \"GET\":","        return render_template(\"quote.html\")","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","","    if request.method == \"POST\":","        if not request.form.get(\"username\") or not request.form.get(\"password\") or request.form.get(\"password\") != request.form.get(\"confirmation\"):","            return apology(\"retry\", 400)","","        # insert the new user into users, storing the hash of the user's password","        result = db.execute(\"INSERT INTO users (username, hash) \\","                             VALUES(:username, :hash)\", \\","                             username=request.form.get(\"username\"), \\","                             hash=pwd_context.hash(request.form.get(\"password\"))))","","        if not result:","            return apology(\"Username already exist\")","","        # remember which user has logged in","        session[\"user_id\"] = result","","        # redirect user to home page","        return redirect(url_for(\"index\"))","","    else:","        return render_template(\"register.html\")","","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():",""],"id":17},{"start":{"row":0,"column":0},"end":{"row":265,"column":15},"action":"insert","lines":["","from tkinter import * ","import tkinter.filedialog","import time","","from tkinter import messagebox as pop_up","","EMPTY_TITLE_ERROR_MESSAGE_OPEN = \"Please write the name of the file you want to open in the given field.\"","FILE_NOT_FOUND_ERROR_MESSAGE = \"No file with the given title was found, remember that this text editor can only read files in its directory.\"","","root = tkinter.Tk()","text=Text(root)","text.grid()","","def saveas():","    global text","    t = text.get(\"1.0\", \"end-1c\")","    savelocation=tkinter.filedialog.asksaveasfilename()","    file1=open(savelocation, \"w+\")","    file1.write(t)","    file1.close()","","def FontHelvetica():","    global text","    text.config(font=\"Helvetica\")","","def FontCourier():","    global text","    text.config(font=\"Courier\")","","def FontMonaco():","    global text","    text.config(font=\"Monaco\")","","def FontArial():","    global text","    text.config(font=\"Arial\")","","def FontFutura():","    global text","    text.config(font=\"Futura\")","","def FontNote():","    global text","    text.config(font=\"Noteworthy\")","","def FontCalibri():","    global text","    text.config(font=\"Calibri\")","","","def ColorRed():","    global text","    text.config(fg=\"Red\")","","def ColorBlue():","    global text","    text.config(fg=\"Blue\")","","def ColorGreen():","    global text","    text.config(fg=\"Green\")","","def ColorBrown():","    global text","    text.config(fg=\"Brown\")","","def ColorYellow():","    global text","    text.config(fg=\"Yellow\")","","def ColorOrange():","    global text","    text.config(fg=\"Orange\")","","def ColorPurple():","    global text","    text.config(fg=\"Purple\")","","","def Size12():","    global text","    text.config(size=12)","","def Size14():","    global text","    text.config(size=14)","","def Size16():","    global text","    text.config(size=16)","","def Size18():","    global text","    text.config(size=18)","","def Size20():","    global text","    text.config(size=20)","","def Size22():","    global text","    text.config(size=22)","","def Size24():","    global text","    text.config(size=24)","","def Size26():","    global text","    text.config(size=26)","","def Size30():","    global text","    text.config(size=30)","","def Size42():","    global text","    text.config(size=42)","","def Size74():","    global text","    text.config(size=74)","","","def add_date():","    full_date = time.localtime()","    day = str(full_date.tm_mday)","    month = str(full_date.tm_mon)","    year = str(full_date.tm_year)","    date = (\"\\n\"+day+'/'+month+'/'+year)","    text.insert(tkinter.INSERT, date, \"a\")","","def _open():","    if not file_title.get():","        pop_up.showerror(\"Title is empty.\",EMPTY_TITLE_ERROR_MESSAGE_OPEN)","        return 1","    filename = file_title.get()","##    if not \".txt\" in file_title.get():","##        filename = file_title.get() + \".txt\"","","    try:","        with open(filename) as f:","            text.delete(\"1.0\",tkinter.END)","            text.insert(tkinter.INSERT, f.read(), \"a\")","    except IOError:","        pop_up.showerror(\"File not found.\",FILE_NOT_FOUND_ERROR_MESSAGE)","","","##EMPTY_TITLE_ERROR_MESSAGE_OPEN = \"Please write the name of the file you want to open in the given field.\"","","","top = tkinter.Frame(root)","temp = tkinter.Label(root,text=\"Title:\")","temp.pack(in_ = top,side=tkinter.LEFT)","","file_title = tkinter.Entry(root)","file_title.pack(in_ = top,side=tkinter.RIGHT)","file_title.grid()","","opt=Menubutton(root, text=\"Options\")","opt.grid() ","opt.menu=Menu(opt, tearoff=0) ","opt[\"menu\"]=opt.menu","opt.menu.add_command(label=\"Open\", command=_open)","opt.menu.add_command(label=\"Save\", command=saveas)","opt.menu.add_command(label=\"Add date\",command=add_date)","","","color=Menubutton(root, text=\"Colour\") ","color.grid() ","color.menu=Menu(color, tearoff=0) ","color[\"menu\"]=color.menu","","font=Menubutton(root, text=\"Font\") ","font.grid() ","font.menu=Menu(font, tearoff=0) ","font[\"menu\"]=font.menu","","size=Menubutton(root, text=\"Size\") ","size.grid() ","size.menu=Menu(size, tearoff=0) ","size[\"menu\"]=size.menu","","Helvetica=IntVar() ","Monaco=IntVar() ","Arial=IntVar()","Courier=IntVar()","Futura=IntVar()","Note=IntVar()","Felt=IntVar()","","Red=IntVar()","Blue=IntVar()","Green=IntVar()","Brown=IntVar()","Yellow=IntVar()","Orange=IntVar()","Purple=IntVar()","","Size12=IntVar()","Size14=IntVar()","Size16=IntVar()","Size18=IntVar()","Size20=IntVar()","Size22=IntVar()","Size24=IntVar()","Size26=IntVar()","Size30=IntVar()","Size42=IntVar()","Size74=IntVar()","","font.menu.add_checkbutton(label=\"Courier\", variable=Courier, ","command=FontCourier)","font.menu.add_checkbutton(label=\"Helvetica\", variable=Helvetica,","command=FontHelvetica)","font.menu.add_checkbutton(label=\"Monaco\", variable=Monaco,","command=FontMonaco)","font.menu.add_checkbutton(label=\"Arial\", variable=Arial,","command=FontArial)","font.menu.add_checkbutton(label=\"Futura\", variable=Futura,","command=FontFutura)","font.menu.add_checkbutton(label=\"Noteworthy\", variable=Note,","command=FontNote)","font.menu.add_checkbutton(label=\"Calibri\", variable=Felt,","command=FontCalibri)","","color.menu.add_checkbutton(label=\"Red\", variable=Red,","command=ColorRed)","color.menu.add_checkbutton(label=\"Blue\", variable=Blue,","command=ColorBlue)","color.menu.add_checkbutton(label=\"Green\", variable=Green,","command=ColorGreen)","color.menu.add_checkbutton(label=\"Brown\", variable=Brown,","command=ColorBrown)","color.menu.add_checkbutton(label=\"Yellow\", variable=Yellow,","command=ColorYellow)","color.menu.add_checkbutton(label=\"Orange\", variable=Orange,","command=ColorOrange)","color.menu.add_checkbutton(label=\"Purple\", variable=Purple,","command=ColorPurple)","","size.menu.add_radiobutton(label=\"12\", variable=Size12,","command=Size12)","size.menu.add_radiobutton(label=\"14\", variable=Size14,","command=Size14)","size.menu.add_checkbutton(label=\"16\", variable=Size16,","command=Size16)","size.menu.add_checkbutton(label=\"18\", variable=Size18,","command=Size18)","size.menu.add_checkbutton(label=\"20\", variable=Size20,","command=Size20)","size.menu.add_checkbutton(label=\"22\", variable=Size22,","command=Size22)","size.menu.add_checkbutton(label=\"24\", variable=Size24,","command=Size24)","size.menu.add_checkbutton(label=\"26\", variable=Size26,","command=Size26)","size.menu.add_checkbutton(label=\"30\", variable=Size30,","command=Size30)","size.menu.add_checkbutton(label=\"42\", variable=Size42,","command=Size42)","size.menu.add_checkbutton(label=\"74\", variable=Size74,","command=Size74)","","root.mainloop()"]}],[{"start":{"row":0,"column":0},"end":{"row":265,"column":15},"action":"remove","lines":["","from tkinter import * ","import tkinter.filedialog","import time","","from tkinter import messagebox as pop_up","","EMPTY_TITLE_ERROR_MESSAGE_OPEN = \"Please write the name of the file you want to open in the given field.\"","FILE_NOT_FOUND_ERROR_MESSAGE = \"No file with the given title was found, remember that this text editor can only read files in its directory.\"","","root = tkinter.Tk()","text=Text(root)","text.grid()","","def saveas():","    global text","    t = text.get(\"1.0\", \"end-1c\")","    savelocation=tkinter.filedialog.asksaveasfilename()","    file1=open(savelocation, \"w+\")","    file1.write(t)","    file1.close()","","def FontHelvetica():","    global text","    text.config(font=\"Helvetica\")","","def FontCourier():","    global text","    text.config(font=\"Courier\")","","def FontMonaco():","    global text","    text.config(font=\"Monaco\")","","def FontArial():","    global text","    text.config(font=\"Arial\")","","def FontFutura():","    global text","    text.config(font=\"Futura\")","","def FontNote():","    global text","    text.config(font=\"Noteworthy\")","","def FontCalibri():","    global text","    text.config(font=\"Calibri\")","","","def ColorRed():","    global text","    text.config(fg=\"Red\")","","def ColorBlue():","    global text","    text.config(fg=\"Blue\")","","def ColorGreen():","    global text","    text.config(fg=\"Green\")","","def ColorBrown():","    global text","    text.config(fg=\"Brown\")","","def ColorYellow():","    global text","    text.config(fg=\"Yellow\")","","def ColorOrange():","    global text","    text.config(fg=\"Orange\")","","def ColorPurple():","    global text","    text.config(fg=\"Purple\")","","","def Size12():","    global text","    text.config(size=12)","","def Size14():","    global text","    text.config(size=14)","","def Size16():","    global text","    text.config(size=16)","","def Size18():","    global text","    text.config(size=18)","","def Size20():","    global text","    text.config(size=20)","","def Size22():","    global text","    text.config(size=22)","","def Size24():","    global text","    text.config(size=24)","","def Size26():","    global text","    text.config(size=26)","","def Size30():","    global text","    text.config(size=30)","","def Size42():","    global text","    text.config(size=42)","","def Size74():","    global text","    text.config(size=74)","","","def add_date():","    full_date = time.localtime()","    day = str(full_date.tm_mday)","    month = str(full_date.tm_mon)","    year = str(full_date.tm_year)","    date = (\"\\n\"+day+'/'+month+'/'+year)","    text.insert(tkinter.INSERT, date, \"a\")","","def _open():","    if not file_title.get():","        pop_up.showerror(\"Title is empty.\",EMPTY_TITLE_ERROR_MESSAGE_OPEN)","        return 1","    filename = file_title.get()","##    if not \".txt\" in file_title.get():","##        filename = file_title.get() + \".txt\"","","    try:","        with open(filename) as f:","            text.delete(\"1.0\",tkinter.END)","            text.insert(tkinter.INSERT, f.read(), \"a\")","    except IOError:","        pop_up.showerror(\"File not found.\",FILE_NOT_FOUND_ERROR_MESSAGE)","","","##EMPTY_TITLE_ERROR_MESSAGE_OPEN = \"Please write the name of the file you want to open in the given field.\"","","","top = tkinter.Frame(root)","temp = tkinter.Label(root,text=\"Title:\")","temp.pack(in_ = top,side=tkinter.LEFT)","","file_title = tkinter.Entry(root)","file_title.pack(in_ = top,side=tkinter.RIGHT)","file_title.grid()","","opt=Menubutton(root, text=\"Options\")","opt.grid() ","opt.menu=Menu(opt, tearoff=0) ","opt[\"menu\"]=opt.menu","opt.menu.add_command(label=\"Open\", command=_open)","opt.menu.add_command(label=\"Save\", command=saveas)","opt.menu.add_command(label=\"Add date\",command=add_date)","","","color=Menubutton(root, text=\"Colour\") ","color.grid() ","color.menu=Menu(color, tearoff=0) ","color[\"menu\"]=color.menu","","font=Menubutton(root, text=\"Font\") ","font.grid() ","font.menu=Menu(font, tearoff=0) ","font[\"menu\"]=font.menu","","size=Menubutton(root, text=\"Size\") ","size.grid() ","size.menu=Menu(size, tearoff=0) ","size[\"menu\"]=size.menu","","Helvetica=IntVar() ","Monaco=IntVar() ","Arial=IntVar()","Courier=IntVar()","Futura=IntVar()","Note=IntVar()","Felt=IntVar()","","Red=IntVar()","Blue=IntVar()","Green=IntVar()","Brown=IntVar()","Yellow=IntVar()","Orange=IntVar()","Purple=IntVar()","","Size12=IntVar()","Size14=IntVar()","Size16=IntVar()","Size18=IntVar()","Size20=IntVar()","Size22=IntVar()","Size24=IntVar()","Size26=IntVar()","Size30=IntVar()","Size42=IntVar()","Size74=IntVar()","","font.menu.add_checkbutton(label=\"Courier\", variable=Courier, ","command=FontCourier)","font.menu.add_checkbutton(label=\"Helvetica\", variable=Helvetica,","command=FontHelvetica)","font.menu.add_checkbutton(label=\"Monaco\", variable=Monaco,","command=FontMonaco)","font.menu.add_checkbutton(label=\"Arial\", variable=Arial,","command=FontArial)","font.menu.add_checkbutton(label=\"Futura\", variable=Futura,","command=FontFutura)","font.menu.add_checkbutton(label=\"Noteworthy\", variable=Note,","command=FontNote)","font.menu.add_checkbutton(label=\"Calibri\", variable=Felt,","command=FontCalibri)","","color.menu.add_checkbutton(label=\"Red\", variable=Red,","command=ColorRed)","color.menu.add_checkbutton(label=\"Blue\", variable=Blue,","command=ColorBlue)","color.menu.add_checkbutton(label=\"Green\", variable=Green,","command=ColorGreen)","color.menu.add_checkbutton(label=\"Brown\", variable=Brown,","command=ColorBrown)","color.menu.add_checkbutton(label=\"Yellow\", variable=Yellow,","command=ColorYellow)","color.menu.add_checkbutton(label=\"Orange\", variable=Orange,","command=ColorOrange)","color.menu.add_checkbutton(label=\"Purple\", variable=Purple,","command=ColorPurple)","","size.menu.add_radiobutton(label=\"12\", variable=Size12,","command=Size12)","size.menu.add_radiobutton(label=\"14\", variable=Size14,","command=Size14)","size.menu.add_checkbutton(label=\"16\", variable=Size16,","command=Size16)","size.menu.add_checkbutton(label=\"18\", variable=Size18,","command=Size18)","size.menu.add_checkbutton(label=\"20\", variable=Size20,","command=Size20)","size.menu.add_checkbutton(label=\"22\", variable=Size22,","command=Size22)","size.menu.add_checkbutton(label=\"24\", variable=Size24,","command=Size24)","size.menu.add_checkbutton(label=\"26\", variable=Size26,","command=Size26)","size.menu.add_checkbutton(label=\"30\", variable=Size30,","command=Size30)","size.menu.add_checkbutton(label=\"42\", variable=Size42,","command=Size42)","size.menu.add_checkbutton(label=\"74\", variable=Size74,","command=Size74)","","root.mainloop()"],"id":18},{"start":{"row":0,"column":0},"end":{"row":246,"column":0},"action":"insert","lines":["from passlib.apps import custom_app_context as pwd_context","from tkinter import * ","import tkinter.filedialog","import time","","from tkinter import messagebox as pop_up","","EMPTY_TITLE_ERROR_MESSAGE_OPEN = \"Please write the name of the file you want to open in the given field.\"","FILE_NOT_FOUND_ERROR_MESSAGE = \"No file with the given title was found, remember that this text editor can only read files in its directory.\"","","root = tkinter.Tk()","text=Text(root)","text.grid()","","scrollb = Scrollbar(root, command=text.yview)","scrollb.grid(row=0, column=1, sticky='nsew')","text['yscrollcommand'] = scrollb.set","","def help():","    root = tkinter.Tk()","    texta=Text(root)","    texta.grid()","    texta.insert(END,\"\"\"HELP\\n\\nThis is a bare-bones text-editor made in Python and the tkinter framework.","Type in the textbox. To save your text, click on Options and choose Save.","To open a file(In the same directory as this program), enter the filename in the entry box above the Options button.","Then click Options and choose Open.","To add the Date, click Options and choose Date.","To convert the text to leetspeak, click Options and choose Convert to LeetSpeak.","To hash the text, click Options and choose Hash.","To check the text for spelling mistakes, click Options and choose Check for Mistakes.","To change the font color, click Color and choose.","To change the the font, click Font and choose.\"\"\")","    ","","def saveas():                                                   #  Function to save file","    global text","    t = text.get(\"1.0\", \"end-1c\")","    savelocation=tkinter.filedialog.asksaveasfilename()","    file1=open(savelocation, \"w+\")","    file1.write(t)","    file1.close()","","def leet():                                                     # Function to convert text to 1337speak","    t = text.get(\"1.0\", \"end-1c\")","    getchar = lambda c: chars[c] if c in chars else c","    chars = {\"a\":\"@\",\"e\":\"3\",\"i\":\"1\",\"l\":\"1\",\"o\":\"0\",\"s\":\"5\",\"t\":\"7\"}","    data = ''.join(getchar(c) for c in t)","    text.delete(\"1.0\", \"end\") ","    text.insert(END,data)","    text.after(1000, leet)","","def hash():                                                     # Function to hash text","    t = text.get(\"1.0\", \"end-1c\")","    data = pwd_context.hash(t)","    text.delete(\"1.0\", \"end\") ","    text.insert(END,data)","    text.after(1000, hash)","","def check():","    root = tkinter.Tk()","    text2=Text(root)","    text2.grid()","    text2.insert(END,\"MISSPELLED WORDS:\\n\")","    global text","    t = text.get(\"1.0\", \"end-1c\")","    words = open(\"spell.txt\").readlines()","    words = [word.strip() for word in words]","    hash = {}","    for word in words:","        hash[word] = True","    for word in t.split():","        found = word in hash","        if found == False:","            if word.isalpha():","                text2.insert(END,word + \"\\n\")","","                ","    ","#Functions for fonts","def FontHelvetica():","    global text","    text.config(font=\"Helvetica\")","","def FontCourier():","    global text","    text.config(font=\"Courier\")","","def FontMonaco():","    global text","    text.config(font=\"Monaco\")","","def FontArial():","    global text","    text.config(font=\"Arial\")","","def FontFutura():","    global text","    text.config(font=\"Futura\")","","def FontNote():","    global text","    text.config(font=\"Noteworthy\")","","def FontCalibri():","    global text","    text.config(font=\"Calibri\")","","#Functions for colors","def ColorRed():","    global text","    text.config(fg=\"Red\")","","def ColorBlue():","    global text","    text.config(fg=\"Blue\")","","def ColorGreen():","    global text","    text.config(fg=\"Green\")","","def ColorBrown():","    global text","    text.config(fg=\"Brown\")","","def ColorYellow():","    global text","    text.config(fg=\"Yellow\")","","def ColorOrange():","    global text","    text.config(fg=\"Orange\")","","def ColorPurple():","    global text","    text.config(fg=\"Purple\")","","","def add_date():","    full_date = time.localtime()","    day = str(full_date.tm_mday)","    month = str(full_date.tm_mon)","    year = str(full_date.tm_year)","    date = (\"\\n\"+day+'/'+month+'/'+year)","    text.insert(tkinter.INSERT, date, \"a\")","","def _open():","    if not file_title.get():","        pop_up.showerror(\"Title is empty.\",EMPTY_TITLE_ERROR_MESSAGE_OPEN)","        return 1","    filename = file_title.get()","##    if not \".txt\" in file_title.get():","##        filename = file_title.get() + \".txt\"","","    try:","        with open(filename) as f:","            text.delete(\"1.0\",tkinter.END)","            text.insert(tkinter.INSERT, f.read(), \"a\")","    except IOError:","        pop_up.showerror(\"File not found.\",FILE_NOT_FOUND_ERROR_MESSAGE)","","","##EMPTY_TITLE_ERROR_MESSAGE_OPEN = \"Please write the name of the file you want to open in the given field.\"","","","top = tkinter.Frame(root)","temp = tkinter.Label(root,text=\"Title:\")","temp.pack(in_ = top,side=tkinter.LEFT)","","file_title = tkinter.Entry(root)","file_title.pack(in_ = top,side=tkinter.RIGHT)","file_title.insert(0, 'File to open')","file_title.bind(\"<FocusIn>\", lambda args: file_title.delete('0', 'end'))","file_title.grid()","","opt=Menubutton(root, text=\"Options\")","opt.grid() ","opt.menu=Menu(opt, tearoff=0) ","opt[\"menu\"]=opt.menu","opt.menu.add_command(label=\"Open\", command=_open)","opt.menu.add_command(label=\"Save\", command=saveas)","opt.menu.add_command(label=\"Add date\",command=add_date)","opt.menu.add_command(label=\"Convert to LeetSpeak\",command=leet)","opt.menu.add_command(label=\"Hash\",command=hash)","opt.menu.add_command(label=\"Check for Mistakes\",command=check)","opt.menu.add_command(label=\"Help\",command=help)","","color=Menubutton(root, text=\"Colour\") ","color.grid() ","color.menu=Menu(color, tearoff=0) ","color[\"menu\"]=color.menu","","font=Menubutton(root, text=\"Font\") ","font.grid() ","font.menu=Menu(font, tearoff=0) ","font[\"menu\"]=font.menu","","","Helvetica=IntVar() ","Monaco=IntVar() ","Arial=IntVar()","Courier=IntVar()","Futura=IntVar()","Note=IntVar()","Felt=IntVar()","","Red=IntVar()","Blue=IntVar()","Green=IntVar()","Brown=IntVar()","Yellow=IntVar()","Orange=IntVar()","Purple=IntVar()","","","font.menu.add_checkbutton(label=\"Courier\", variable=Courier, ","command=FontCourier)","font.menu.add_checkbutton(label=\"Helvetica\", variable=Helvetica,","command=FontHelvetica)","font.menu.add_checkbutton(label=\"Monaco\", variable=Monaco,","command=FontMonaco)","font.menu.add_checkbutton(label=\"Arial\", variable=Arial,","command=FontArial)","font.menu.add_checkbutton(label=\"Futura\", variable=Futura,","command=FontFutura)","font.menu.add_checkbutton(label=\"Noteworthy\", variable=Note,","command=FontNote)","font.menu.add_checkbutton(label=\"Calibri\", variable=Felt,","command=FontCalibri)","","color.menu.add_checkbutton(label=\"Red\", variable=Red,","command=ColorRed)","color.menu.add_checkbutton(label=\"Blue\", variable=Blue,","command=ColorBlue)","color.menu.add_checkbutton(label=\"Green\", variable=Green,","command=ColorGreen)","color.menu.add_checkbutton(label=\"Brown\", variable=Brown,","command=ColorBrown)","color.menu.add_checkbutton(label=\"Yellow\", variable=Yellow,","command=ColorYellow)","color.menu.add_checkbutton(label=\"Orange\", variable=Orange,","command=ColorOrange)","color.menu.add_checkbutton(label=\"Purple\", variable=Purple,","command=ColorPurple)","","","root.mainloop()",""]}],[{"start":{"row":1,"column":21},"end":{"row":1,"column":22},"action":"remove","lines":[" "],"id":19},{"start":{"row":32,"column":0},"end":{"row":32,"column":4},"action":"remove","lines":["    "]},{"start":{"row":47,"column":29},"end":{"row":47,"column":30},"action":"remove","lines":[" "]},{"start":{"row":54,"column":29},"end":{"row":54,"column":30},"action":"remove","lines":[" "]},{"start":{"row":76,"column":0},"end":{"row":76,"column":16},"action":"remove","lines":["                "]},{"start":{"row":77,"column":0},"end":{"row":77,"column":4},"action":"remove","lines":["    "]},{"start":{"row":175,"column":10},"end":{"row":175,"column":11},"action":"remove","lines":[" "]},{"start":{"row":176,"column":29},"end":{"row":176,"column":30},"action":"remove","lines":[" "]},{"start":{"row":186,"column":37},"end":{"row":186,"column":38},"action":"remove","lines":[" "]},{"start":{"row":187,"column":12},"end":{"row":187,"column":13},"action":"remove","lines":[" "]},{"start":{"row":188,"column":33},"end":{"row":188,"column":34},"action":"remove","lines":[" "]},{"start":{"row":191,"column":34},"end":{"row":191,"column":35},"action":"remove","lines":[" "]},{"start":{"row":192,"column":11},"end":{"row":192,"column":12},"action":"remove","lines":[" "]},{"start":{"row":193,"column":31},"end":{"row":193,"column":32},"action":"remove","lines":[" "]},{"start":{"row":197,"column":18},"end":{"row":197,"column":19},"action":"remove","lines":[" "]},{"start":{"row":198,"column":15},"end":{"row":198,"column":16},"action":"remove","lines":[" "]},{"start":{"row":214,"column":60},"end":{"row":214,"column":61},"action":"remove","lines":[" "]}],[{"start":{"row":65,"column":22},"end":{"row":65,"column":23},"action":"remove","lines":["l"],"id":20}],[{"start":{"row":65,"column":21},"end":{"row":65,"column":22},"action":"remove","lines":["l"],"id":21}],[{"start":{"row":65,"column":20},"end":{"row":65,"column":21},"action":"remove","lines":["e"],"id":22}],[{"start":{"row":65,"column":19},"end":{"row":65,"column":20},"action":"remove","lines":["p"],"id":23}],[{"start":{"row":65,"column":18},"end":{"row":65,"column":19},"action":"remove","lines":["s"],"id":24}],[{"start":{"row":65,"column":18},"end":{"row":65,"column":19},"action":"insert","lines":["d"],"id":25}],[{"start":{"row":65,"column":19},"end":{"row":65,"column":20},"action":"insert","lines":["i"],"id":26}],[{"start":{"row":65,"column":20},"end":{"row":65,"column":21},"action":"insert","lines":["c"],"id":27}],[{"start":{"row":65,"column":21},"end":{"row":65,"column":22},"action":"insert","lines":["t"],"id":28}],[{"start":{"row":65,"column":22},"end":{"row":65,"column":23},"action":"insert","lines":["i"],"id":29}],[{"start":{"row":65,"column":23},"end":{"row":65,"column":24},"action":"insert","lines":["o"],"id":30}],[{"start":{"row":65,"column":24},"end":{"row":65,"column":25},"action":"insert","lines":["n"],"id":31}],[{"start":{"row":65,"column":25},"end":{"row":65,"column":26},"action":"insert","lines":["a"],"id":32}],[{"start":{"row":65,"column":26},"end":{"row":65,"column":27},"action":"insert","lines":["r"],"id":33}],[{"start":{"row":65,"column":27},"end":{"row":65,"column":28},"action":"insert","lines":["y"],"id":34}]]},"ace":{"folds":[],"scrolltop":915,"scrollleft":0,"selection":{"start":{"row":49,"column":26},"end":{"row":49,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":42,"state":"start","mode":"ace/mode/python"}},"timestamp":1529672067602,"hash":"0fa7b9903d881e41cf49425b927803bd221dbe7e"}