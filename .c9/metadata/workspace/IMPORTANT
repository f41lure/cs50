{"filter":false,"title":"IMPORTANT","tooltip":"/IMPORTANT","ace":{"folds":[],"scrolltop":5791.111328125,"scrollleft":0,"selection":{"start":{"row":293,"column":49},"end":{"row":294,"column":49},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":142,"state":"start","mode":"ace/mode/text"}},"hash":"19966ed1e98faf8dd84523279b28606e38f02d1c","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":326,"column":35},"action":"insert","lines":["from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session, url_for","from flask_session import Session","from passlib.apps import custom_app_context as pwd_context","from tempfile import gettempdir","","from helpers import *","","# configure application","app = Flask(__name__)","","# ensure responses aren't cached","if app.config[\"DEBUG\"]:","    @app.after_request","    def after_request(response):","        response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","        response.headers[\"Expires\"] = 0","        response.headers[\"Pragma\"] = \"no-cache\"","        return response","","# custom filter","app.jinja_env.filters[\"usd\"] = usd","","# configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = gettempdir()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","@app.route(\"/\")","@login_required","def index():","    # select each symbol owned by the user and it's amount","    portfolio_symbols = db.execute(\"SELECT shares, symbol \\","                                    FROM portfolio WHERE id = :id\", \\","                                    id=session[\"user_id\"])","    ","    # create a temporary variable to store TOTAL worth ( cash + share)","    total_cash = 0","    ","    # update each symbol prices and total","    for portfolio_symbol in portfolio_symbols:","        symbol = portfolio_symbol[\"symbol\"]","        shares = portfolio_symbol[\"shares\"]","        stock = lookup(symbol)","        total = shares * stock[\"price\"]","        total_cash += total","        db.execute(\"UPDATE portfolio SET price=:price, \\","                    total=:total WHERE id=:id AND symbol=:symbol\", \\","                    price=usd(stock[\"price\"]), \\","                    total=usd(total), id=session[\"user_id\"], symbol=symbol)","    ","    # update user's cash in portfolio","    updated_cash = db.execute(\"SELECT cash FROM users \\","                               WHERE id=:id\", id=session[\"user_id\"])","    ","    # update total cash -> cash + shares worth","    total_cash += updated_cash[0][\"cash\"]","    ","    # print portfolio in index homepage","    updated_portfolio = db.execute(\"SELECT * from portfolio \\","                                    WHERE id=:id\", id=session[\"user_id\"])","                                    ","    return render_template(\"index.html\", stocks=updated_portfolio, \\","                            cash=usd(updated_cash[0][\"cash\"]), total= usd(total_cash) )","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def buy():","    \"\"\"Buy shares of stock.\"\"\"","    ","    if request.method == \"GET\":","        return render_template(\"buy.html\")","    else:","        # ensure proper symbol","        stock = lookup(request.form.get(\"symbol\"))","        if not stock:","            return apology(\"Invalid Symbol\")","        ","        # ensure proper number of shares","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","        ","        # select user's cash","        money = db.execute(\"SELECT cash FROM users WHERE id = :id\", \\","                            id=session[\"user_id\"])","        ","        # check if enough money to buy","        if not money or float(money[0][\"cash\"]) < stock[\"price\"] * shares:","            return apology(\"Not enough money\")","        ","        # update history","        db.execute(\"INSERT INTO histories (symbol, shares, price, id) \\","                    VALUES(:symbol, :shares, :price, :id)\", \\","                    symbol=stock[\"symbol\"], shares=shares, \\","                    price=usd(stock[\"price\"]), id=session[\"user_id\"])","                       ","        # update user cash               ","        db.execute(\"UPDATE users SET cash = cash - :purchase WHERE id = :id\", \\","                    id=session[\"user_id\"], \\","                    purchase=stock[\"price\"] * float(shares))","                        ","        # Select user shares of that symbol","        user_shares = db.execute(\"SELECT shares FROM portfolio \\","                           WHERE id = :id AND symbol=:symbol\", \\","                           id=session[\"user_id\"], symbol=stock[\"symbol\"])","                           ","        # if user doesn't has shares of that symbol, create new stock object","        if not user_shares:","            db.execute(\"INSERT INTO portfolio (name, shares, price, total, symbol, id) \\","                        VALUES(:name, :shares, :price, :total, :symbol, :id)\", \\","                        name=stock[\"name\"], shares=shares, price=usd(stock[\"price\"]), \\","                        total=usd(shares * stock[\"price\"]), \\","                        symbol=stock[\"symbol\"], id=session[\"user_id\"])","                        ","        # Else increment the shares count","        else:","            shares_total = user_shares[0][\"shares\"] + shares","            db.execute(\"UPDATE portfolio SET shares=:shares \\","                        WHERE id=:id AND symbol=:symbol\", \\","                        shares=shares_total, id=session[\"user_id\"], \\","                        symbol=stock[\"symbol\"])","        ","        # return to index","        return redirect(url_for(\"index\"))","        ","","@app.route(\"/history\")","@login_required","def history():","    \"\"\"Show history of transactions.\"\"\"","    histories = db.execute(\"SELECT * from histories WHERE id=:id\", id=session[\"user_id\"])","    ","    return render_template(\"history.html\", histories=histories)","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in.\"\"\"","","    # forget any user_id","    session.clear()","","    # if user reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"Must provide username\")","","        # ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"Must provide password\")","","        # query database for username","        rows = db.execute(\"SELECT * FROM users \\","                           WHERE username = :username\", \\","                           username=request.form.get(\"username\"))","","        # ensure username exists and password is correct","        if len(rows) != 1 or not pwd_context.verify(request.form.get(\"password\"), rows[0][\"hash\"]):","            return apology(\"invalid username and/or password\")","","        # remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # redirect user to home page","        return redirect(url_for(\"index\"))","","    # else if user reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out.\"\"\"","","    # forget any user_id","    session.clear()","","    # redirect user to login form","    return redirect(url_for(\"login\"))","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","    \"\"\"Get stock quote.\"\"\"","    ","    if request.method == \"POST\":","        rows = lookup(request.form.get(\"symbol\"))","        ","        if not rows:","            return apology(\"Invalid Symbol\")","            ","        return render_template(\"quoted.html\", stock=rows)","    ","    else:","        return render_template(\"quote.html\")","    ","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","    \"\"\"Register user.\"\"\"","    ","    if request.method == \"POST\":","        ","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"Must provide username\")","            ","        # ensure password was submitted    ","        elif not request.form.get(\"password\"):","            return apology(\"Must provide password\")","        ","        # ensure password and verified password is the same","        elif request.form.get(\"password\") != request.form.get(\"passwordagain\"):","            return apology(\"password doesn't match\")","        ","        # insert the new user into users, storing the hash of the user's password","        result = db.execute(\"INSERT INTO users (username, hash) \\","                             VALUES(:username, :hash)\", \\","                             username=request.form.get(\"username\"), \\","                             hash=pwd_context.encrypt(request.form.get(\"password\")))","                 ","        if not result:","            return apology(\"Username already exist\")","        ","        # remember which user has logged in","        session[\"user_id\"] = result","","        # redirect user to home page","        return redirect(url_for(\"index\"))","    ","    else:","        return render_template(\"register.html\")                ","","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():","    \"\"\"Sell shares of stock.\"\"\"","    if request.method == \"GET\":","        return render_template(\"sell.html\")","    else:","        # ensure proper symbol","        stock = lookup(request.form.get(\"symbol\"))","        if not stock:","            return apology(\"Invalid Symbol\")","        ","        # ensure proper number of shares","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","        ","        # select the symbol shares of that user","        user_shares = db.execute(\"SELECT shares FROM portfolio \\","                                 WHERE id = :id AND symbol=:symbol\", \\","                                 id=session[\"user_id\"], symbol=stock[\"symbol\"])","        ","        # check if enough shares to sell","        if not user_shares or int(user_shares[0][\"shares\"]) < shares:","            return apology(\"Not enough shares\")","        ","        # update history of a sell","        db.execute(\"INSERT INTO histories (symbol, shares, price, id) \\","                    VALUES(:symbol, :shares, :price, :id)\", \\","                    symbol=stock[\"symbol\"], shares=-shares, \\","                    price=usd(stock[\"price\"]), id=session[\"user_id\"])","                       ","        # update user cash (increase)              ","        db.execute(\"UPDATE users SET cash = cash + :purchase WHERE id = :id\", \\","                    id=session[\"user_id\"], \\","                    purchase=stock[\"price\"] * float(shares))","                        ","        # decrement the shares count","        shares_total = user_shares[0][\"shares\"] - shares","        ","        # if after decrement is zero, delete shares from portfolio","        if shares_total == 0:","            db.execute(\"DELETE FROM portfolio \\","                        WHERE id=:id AND symbol=:symbol\", \\","                        id=session[\"user_id\"], \\","                        symbol=stock[\"symbol\"])","        # otherwise, update portfolio shares count","        else:","            db.execute(\"UPDATE portfolio SET shares=:shares \\","                    WHERE id=:id AND symbol=:symbol\", \\","                    shares=shares_total, id=session[\"user_id\"], \\","                    symbol=stock[\"symbol\"])","        ","        # return to index","        return redirect(url_for(\"index\"))","        ","@app.route(\"/loan\", methods=[\"GET\", \"POST\"])","@login_required","def loan():","    \"\"\"Get a loan.\"\"\"","    ","    if request.method == \"POST\":","        ","        # ensure must be integers","        try:","            loan = int(request.form.get(\"loan\"))","            if loan < 0:","                return apology(\"Loan must be positive amount\")","            elif loan > 1000:","                return apology(\"Cannot loan more than $1,000 at once\")","        except:","            return apology(\"Loan must be positive integer\")","            ","        # update user cash (increase)              ","        db.execute(\"UPDATE users SET cash = cash + :loan WHERE id = :id\", \\","                    loan=loan, id=session[\"user_id\"])","        ","        # return to index","        return apology(\"Loan is successful\", \"No need to pay me back\")","    ","    else:","return render_template(\"loan.html\")"],"id":1}],[{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"remove","lines":["    "],"id":2},{"start":{"row":42,"column":0},"end":{"row":42,"column":4},"action":"remove","lines":["    "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":4},"action":"remove","lines":["    "]},{"start":{"row":58,"column":0},"end":{"row":58,"column":4},"action":"remove","lines":["    "]},{"start":{"row":61,"column":0},"end":{"row":61,"column":4},"action":"remove","lines":["    "]},{"start":{"row":65,"column":0},"end":{"row":65,"column":36},"action":"remove","lines":["                                    "]},{"start":{"row":73,"column":0},"end":{"row":73,"column":4},"action":"remove","lines":["    "]},{"start":{"row":81,"column":0},"end":{"row":81,"column":8},"action":"remove","lines":["        "]},{"start":{"row":89,"column":0},"end":{"row":89,"column":8},"action":"remove","lines":["        "]},{"start":{"row":93,"column":0},"end":{"row":93,"column":8},"action":"remove","lines":["        "]},{"start":{"row":97,"column":0},"end":{"row":97,"column":8},"action":"remove","lines":["        "]},{"start":{"row":103,"column":0},"end":{"row":103,"column":23},"action":"remove","lines":["                       "]},{"start":{"row":104,"column":26},"end":{"row":104,"column":41},"action":"remove","lines":["               "]},{"start":{"row":108,"column":0},"end":{"row":108,"column":24},"action":"remove","lines":["                        "]},{"start":{"row":113,"column":0},"end":{"row":113,"column":27},"action":"remove","lines":["                           "]},{"start":{"row":121,"column":0},"end":{"row":121,"column":24},"action":"remove","lines":["                        "]},{"start":{"row":129,"column":0},"end":{"row":129,"column":8},"action":"remove","lines":["        "]},{"start":{"row":132,"column":0},"end":{"row":132,"column":8},"action":"remove","lines":["        "]},{"start":{"row":139,"column":0},"end":{"row":139,"column":4},"action":"remove","lines":["    "]},{"start":{"row":193,"column":0},"end":{"row":193,"column":4},"action":"remove","lines":["    "]},{"start":{"row":196,"column":0},"end":{"row":196,"column":8},"action":"remove","lines":["        "]},{"start":{"row":199,"column":0},"end":{"row":199,"column":12},"action":"remove","lines":["            "]},{"start":{"row":201,"column":0},"end":{"row":201,"column":4},"action":"remove","lines":["    "]},{"start":{"row":204,"column":0},"end":{"row":204,"column":4},"action":"remove","lines":["    "]},{"start":{"row":209,"column":0},"end":{"row":209,"column":4},"action":"remove","lines":["    "]},{"start":{"row":211,"column":0},"end":{"row":211,"column":8},"action":"remove","lines":["        "]},{"start":{"row":215,"column":0},"end":{"row":215,"column":12},"action":"remove","lines":["            "]},{"start":{"row":216,"column":39},"end":{"row":216,"column":43},"action":"remove","lines":["    "]},{"start":{"row":219,"column":0},"end":{"row":219,"column":8},"action":"remove","lines":["        "]},{"start":{"row":223,"column":0},"end":{"row":223,"column":8},"action":"remove","lines":["        "]},{"start":{"row":229,"column":0},"end":{"row":229,"column":17},"action":"remove","lines":["                 "]},{"start":{"row":232,"column":0},"end":{"row":232,"column":8},"action":"remove","lines":["        "]},{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"remove","lines":["    "]},{"start":{"row":240,"column":47},"end":{"row":240,"column":63},"action":"remove","lines":["                "]},{"start":{"row":253,"column":0},"end":{"row":253,"column":8},"action":"remove","lines":["        "]},{"start":{"row":261,"column":0},"end":{"row":261,"column":8},"action":"remove","lines":["        "]},{"start":{"row":266,"column":0},"end":{"row":266,"column":8},"action":"remove","lines":["        "]},{"start":{"row":270,"column":0},"end":{"row":270,"column":8},"action":"remove","lines":["        "]},{"start":{"row":276,"column":0},"end":{"row":276,"column":23},"action":"remove","lines":["                       "]},{"start":{"row":277,"column":37},"end":{"row":277,"column":51},"action":"remove","lines":["              "]},{"start":{"row":281,"column":0},"end":{"row":281,"column":24},"action":"remove","lines":["                        "]},{"start":{"row":284,"column":0},"end":{"row":284,"column":8},"action":"remove","lines":["        "]},{"start":{"row":297,"column":0},"end":{"row":297,"column":8},"action":"remove","lines":["        "]},{"start":{"row":300,"column":0},"end":{"row":300,"column":8},"action":"remove","lines":["        "]},{"start":{"row":305,"column":0},"end":{"row":305,"column":4},"action":"remove","lines":["    "]},{"start":{"row":307,"column":0},"end":{"row":307,"column":8},"action":"remove","lines":["        "]},{"start":{"row":317,"column":0},"end":{"row":317,"column":12},"action":"remove","lines":["            "]},{"start":{"row":318,"column":37},"end":{"row":318,"column":51},"action":"remove","lines":["              "]},{"start":{"row":321,"column":0},"end":{"row":321,"column":8},"action":"remove","lines":["        "]},{"start":{"row":324,"column":0},"end":{"row":324,"column":4},"action":"remove","lines":["    "]}]]},"timestamp":1525524960724}