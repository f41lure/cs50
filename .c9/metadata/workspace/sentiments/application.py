{"filter":false,"title":"application.py","tooltip":"/sentiments/application.py","undoManager":{"mark":19,"position":-1,"stack":[[{"start":{"row":132,"column":7},"end":{"row":132,"column":8},"action":"insert","lines":["s"],"id":21}],[{"start":{"row":132,"column":6},"end":{"row":132,"column":7},"action":"insert","lines":["s"],"id":21}],[{"start":{"row":132,"column":5},"end":{"row":132,"column":6},"action":"insert","lines":["a"],"id":22}],[{"start":{"row":132,"column":4},"end":{"row":132,"column":5},"action":"insert","lines":["p"],"id":23}],[{"start":{"row":131,"column":43},"end":{"row":132,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":132,"column":0},"end":{"row":132,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":72,"column":4},"end":{"row":72,"column":6},"action":"insert","lines":["# "],"id":25},{"start":{"row":74,"column":4},"end":{"row":74,"column":6},"action":"insert","lines":["# "]},{"start":{"row":75,"column":4},"end":{"row":75,"column":6},"action":"insert","lines":["# "]},{"start":{"row":76,"column":4},"end":{"row":76,"column":6},"action":"insert","lines":["# "]},{"start":{"row":77,"column":4},"end":{"row":77,"column":6},"action":"insert","lines":["# "]},{"start":{"row":78,"column":4},"end":{"row":78,"column":6},"action":"insert","lines":["# "]},{"start":{"row":79,"column":4},"end":{"row":79,"column":6},"action":"insert","lines":["# "]},{"start":{"row":80,"column":4},"end":{"row":80,"column":6},"action":"insert","lines":["# "]},{"start":{"row":82,"column":4},"end":{"row":82,"column":6},"action":"insert","lines":["# "]},{"start":{"row":83,"column":4},"end":{"row":83,"column":6},"action":"insert","lines":["# "]},{"start":{"row":84,"column":4},"end":{"row":84,"column":6},"action":"insert","lines":["# "]},{"start":{"row":85,"column":4},"end":{"row":85,"column":6},"action":"insert","lines":["# "]},{"start":{"row":86,"column":4},"end":{"row":86,"column":6},"action":"insert","lines":["# "]},{"start":{"row":87,"column":4},"end":{"row":87,"column":6},"action":"insert","lines":["# "]},{"start":{"row":88,"column":4},"end":{"row":88,"column":6},"action":"insert","lines":["# "]},{"start":{"row":90,"column":4},"end":{"row":90,"column":6},"action":"insert","lines":["# "]},{"start":{"row":91,"column":4},"end":{"row":91,"column":6},"action":"insert","lines":["# "]},{"start":{"row":92,"column":4},"end":{"row":92,"column":6},"action":"insert","lines":["# "]},{"start":{"row":94,"column":4},"end":{"row":94,"column":6},"action":"insert","lines":["# "]},{"start":{"row":95,"column":4},"end":{"row":95,"column":6},"action":"insert","lines":["# "]},{"start":{"row":96,"column":4},"end":{"row":96,"column":6},"action":"insert","lines":["# "]},{"start":{"row":98,"column":4},"end":{"row":98,"column":6},"action":"insert","lines":["# "]},{"start":{"row":99,"column":4},"end":{"row":99,"column":6},"action":"insert","lines":["# "]},{"start":{"row":100,"column":4},"end":{"row":100,"column":6},"action":"insert","lines":["# "]},{"start":{"row":101,"column":4},"end":{"row":101,"column":6},"action":"insert","lines":["# "]},{"start":{"row":102,"column":4},"end":{"row":102,"column":6},"action":"insert","lines":["# "]},{"start":{"row":104,"column":4},"end":{"row":104,"column":6},"action":"insert","lines":["# "]},{"start":{"row":105,"column":4},"end":{"row":105,"column":6},"action":"insert","lines":["# "]},{"start":{"row":106,"column":4},"end":{"row":106,"column":6},"action":"insert","lines":["# "]},{"start":{"row":107,"column":4},"end":{"row":107,"column":6},"action":"insert","lines":["# "]},{"start":{"row":109,"column":4},"end":{"row":109,"column":6},"action":"insert","lines":["# "]},{"start":{"row":110,"column":4},"end":{"row":110,"column":6},"action":"insert","lines":["# "]},{"start":{"row":111,"column":4},"end":{"row":111,"column":5},"action":"insert","lines":["#"]},{"start":{"row":112,"column":4},"end":{"row":112,"column":5},"action":"insert","lines":["#"]},{"start":{"row":114,"column":4},"end":{"row":114,"column":6},"action":"insert","lines":["# "]},{"start":{"row":115,"column":4},"end":{"row":115,"column":6},"action":"insert","lines":["# "]},{"start":{"row":116,"column":4},"end":{"row":116,"column":6},"action":"insert","lines":["# "]},{"start":{"row":117,"column":4},"end":{"row":117,"column":6},"action":"insert","lines":["# "]},{"start":{"row":118,"column":4},"end":{"row":118,"column":6},"action":"insert","lines":["# "]},{"start":{"row":119,"column":4},"end":{"row":119,"column":6},"action":"insert","lines":["# "]},{"start":{"row":120,"column":4},"end":{"row":120,"column":6},"action":"insert","lines":["# "]},{"start":{"row":122,"column":4},"end":{"row":122,"column":6},"action":"insert","lines":["# "]},{"start":{"row":123,"column":4},"end":{"row":123,"column":6},"action":"insert","lines":["# "]},{"start":{"row":124,"column":4},"end":{"row":124,"column":6},"action":"insert","lines":["# "]},{"start":{"row":125,"column":4},"end":{"row":125,"column":6},"action":"insert","lines":["# "]},{"start":{"row":126,"column":4},"end":{"row":126,"column":6},"action":"insert","lines":["# "]},{"start":{"row":127,"column":4},"end":{"row":127,"column":6},"action":"insert","lines":["# "]},{"start":{"row":128,"column":4},"end":{"row":128,"column":6},"action":"insert","lines":["# "]},{"start":{"row":130,"column":4},"end":{"row":130,"column":6},"action":"insert","lines":["# "]},{"start":{"row":131,"column":4},"end":{"row":131,"column":6},"action":"insert","lines":["# "]}],[{"start":{"row":141,"column":7},"end":{"row":141,"column":8},"action":"insert","lines":["s"],"id":26}],[{"start":{"row":141,"column":6},"end":{"row":141,"column":7},"action":"insert","lines":["s"],"id":27}],[{"start":{"row":141,"column":5},"end":{"row":141,"column":6},"action":"insert","lines":["a"],"id":28}],[{"start":{"row":141,"column":4},"end":{"row":141,"column":5},"action":"insert","lines":["p"],"id":29}],[{"start":{"row":141,"column":0},"end":{"row":141,"column":4},"action":"insert","lines":["    "],"id":30}],[{"start":{"row":137,"column":4},"end":{"row":137,"column":6},"action":"insert","lines":["# "],"id":31},{"start":{"row":138,"column":4},"end":{"row":138,"column":6},"action":"insert","lines":["# "]},{"start":{"row":140,"column":4},"end":{"row":140,"column":6},"action":"insert","lines":["# "]}],[{"start":{"row":300,"column":7},"end":{"row":300,"column":8},"action":"insert","lines":["s"],"id":32}],[{"start":{"row":300,"column":6},"end":{"row":300,"column":7},"action":"insert","lines":["s"],"id":33}],[{"start":{"row":300,"column":5},"end":{"row":300,"column":6},"action":"insert","lines":["a"],"id":34}],[{"start":{"row":300,"column":4},"end":{"row":300,"column":5},"action":"insert","lines":["p"],"id":35}],[{"start":{"row":245,"column":4},"end":{"row":245,"column":6},"action":"insert","lines":["# "],"id":36},{"start":{"row":246,"column":4},"end":{"row":246,"column":6},"action":"insert","lines":["# "]},{"start":{"row":247,"column":4},"end":{"row":247,"column":6},"action":"insert","lines":["# "]},{"start":{"row":248,"column":4},"end":{"row":248,"column":6},"action":"insert","lines":["# "]},{"start":{"row":249,"column":4},"end":{"row":249,"column":6},"action":"insert","lines":["# "]},{"start":{"row":250,"column":4},"end":{"row":250,"column":6},"action":"insert","lines":["# "]},{"start":{"row":251,"column":4},"end":{"row":251,"column":6},"action":"insert","lines":["# "]},{"start":{"row":252,"column":4},"end":{"row":252,"column":6},"action":"insert","lines":["# "]},{"start":{"row":254,"column":4},"end":{"row":254,"column":6},"action":"insert","lines":["# "]},{"start":{"row":255,"column":4},"end":{"row":255,"column":6},"action":"insert","lines":["# "]},{"start":{"row":256,"column":4},"end":{"row":256,"column":6},"action":"insert","lines":["# "]},{"start":{"row":257,"column":4},"end":{"row":257,"column":6},"action":"insert","lines":["# "]},{"start":{"row":258,"column":4},"end":{"row":258,"column":6},"action":"insert","lines":["# "]},{"start":{"row":259,"column":4},"end":{"row":259,"column":6},"action":"insert","lines":["# "]},{"start":{"row":260,"column":4},"end":{"row":260,"column":6},"action":"insert","lines":["# "]},{"start":{"row":262,"column":4},"end":{"row":262,"column":6},"action":"insert","lines":["# "]},{"start":{"row":263,"column":4},"end":{"row":263,"column":6},"action":"insert","lines":["# "]},{"start":{"row":264,"column":4},"end":{"row":264,"column":6},"action":"insert","lines":["# "]},{"start":{"row":265,"column":4},"end":{"row":265,"column":6},"action":"insert","lines":["# "]},{"start":{"row":267,"column":4},"end":{"row":267,"column":6},"action":"insert","lines":["# "]},{"start":{"row":268,"column":4},"end":{"row":268,"column":6},"action":"insert","lines":["# "]},{"start":{"row":269,"column":4},"end":{"row":269,"column":6},"action":"insert","lines":["# "]},{"start":{"row":271,"column":4},"end":{"row":271,"column":6},"action":"insert","lines":["# "]},{"start":{"row":272,"column":4},"end":{"row":272,"column":6},"action":"insert","lines":["# "]},{"start":{"row":273,"column":4},"end":{"row":273,"column":6},"action":"insert","lines":["# "]},{"start":{"row":274,"column":4},"end":{"row":274,"column":6},"action":"insert","lines":["# "]},{"start":{"row":275,"column":4},"end":{"row":275,"column":6},"action":"insert","lines":["# "]},{"start":{"row":277,"column":4},"end":{"row":277,"column":6},"action":"insert","lines":["# "]},{"start":{"row":278,"column":4},"end":{"row":278,"column":6},"action":"insert","lines":["# "]},{"start":{"row":279,"column":4},"end":{"row":279,"column":6},"action":"insert","lines":["# "]},{"start":{"row":280,"column":4},"end":{"row":280,"column":6},"action":"insert","lines":["# "]},{"start":{"row":282,"column":4},"end":{"row":282,"column":6},"action":"insert","lines":["# "]},{"start":{"row":283,"column":4},"end":{"row":283,"column":6},"action":"insert","lines":["# "]},{"start":{"row":285,"column":4},"end":{"row":285,"column":6},"action":"insert","lines":["# "]},{"start":{"row":286,"column":4},"end":{"row":286,"column":6},"action":"insert","lines":["# "]},{"start":{"row":287,"column":4},"end":{"row":287,"column":6},"action":"insert","lines":["# "]},{"start":{"row":288,"column":4},"end":{"row":288,"column":6},"action":"insert","lines":["# "]},{"start":{"row":289,"column":4},"end":{"row":289,"column":6},"action":"insert","lines":["# "]},{"start":{"row":290,"column":4},"end":{"row":290,"column":6},"action":"insert","lines":["# "]},{"start":{"row":291,"column":4},"end":{"row":291,"column":6},"action":"insert","lines":["# "]},{"start":{"row":292,"column":4},"end":{"row":292,"column":6},"action":"insert","lines":["# "]},{"start":{"row":293,"column":4},"end":{"row":293,"column":6},"action":"insert","lines":["# "]},{"start":{"row":294,"column":4},"end":{"row":294,"column":6},"action":"insert","lines":["# "]},{"start":{"row":295,"column":4},"end":{"row":295,"column":6},"action":"insert","lines":["# "]},{"start":{"row":296,"column":4},"end":{"row":296,"column":6},"action":"insert","lines":["# "]},{"start":{"row":298,"column":4},"end":{"row":298,"column":6},"action":"insert","lines":["# "]},{"start":{"row":299,"column":4},"end":{"row":299,"column":6},"action":"insert","lines":["# "]}],[{"start":{"row":301,"column":0},"end":{"row":301,"column":2},"action":"insert","lines":["# "],"id":37},{"start":{"row":302,"column":0},"end":{"row":302,"column":2},"action":"insert","lines":["# "]},{"start":{"row":303,"column":0},"end":{"row":303,"column":2},"action":"insert","lines":["# "]},{"start":{"row":304,"column":0},"end":{"row":304,"column":2},"action":"insert","lines":["# "]},{"start":{"row":306,"column":0},"end":{"row":306,"column":2},"action":"insert","lines":["# "]},{"start":{"row":308,"column":0},"end":{"row":308,"column":2},"action":"insert","lines":["# "]},{"start":{"row":309,"column":0},"end":{"row":309,"column":2},"action":"insert","lines":["# "]},{"start":{"row":310,"column":0},"end":{"row":310,"column":2},"action":"insert","lines":["# "]},{"start":{"row":311,"column":0},"end":{"row":311,"column":2},"action":"insert","lines":["# "]},{"start":{"row":312,"column":0},"end":{"row":312,"column":2},"action":"insert","lines":["# "]},{"start":{"row":313,"column":0},"end":{"row":313,"column":2},"action":"insert","lines":["# "]},{"start":{"row":314,"column":0},"end":{"row":314,"column":2},"action":"insert","lines":["# "]},{"start":{"row":315,"column":0},"end":{"row":315,"column":2},"action":"insert","lines":["# "]},{"start":{"row":316,"column":0},"end":{"row":316,"column":2},"action":"insert","lines":["# "]},{"start":{"row":318,"column":0},"end":{"row":318,"column":2},"action":"insert","lines":["# "]},{"start":{"row":319,"column":0},"end":{"row":319,"column":2},"action":"insert","lines":["# "]},{"start":{"row":320,"column":0},"end":{"row":320,"column":2},"action":"insert","lines":["# "]},{"start":{"row":322,"column":0},"end":{"row":322,"column":2},"action":"insert","lines":["# "]},{"start":{"row":323,"column":0},"end":{"row":323,"column":2},"action":"insert","lines":["# "]},{"start":{"row":325,"column":0},"end":{"row":325,"column":2},"action":"insert","lines":["# "]},{"start":{"row":326,"column":0},"end":{"row":326,"column":2},"action":"insert","lines":["# "]}],[{"start":{"row":0,"column":0},"end":{"row":326,"column":35},"action":"insert","lines":["from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session, url_for","from flask_session import Session","from passlib.apps import custom_app_context as pwd_context","from tempfile import gettempdir","","from helpers import *","","# configure application","app = Flask(__name__)","","# ensure responses aren't cached","if app.config[\"DEBUG\"]:","    @app.after_request","    def after_request(response):","        response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","        response.headers[\"Expires\"] = 0","        response.headers[\"Pragma\"] = \"no-cache\"","        return response","","# custom filter","app.jinja_env.filters[\"usd\"] = usd","","# configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = gettempdir()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","@app.route(\"/\")","@login_required","def index():","    # select each symbol owned by the user and it's amount","    portfolio_symbols = db.execute(\"SELECT shares, symbol \\","                                    FROM portfolio WHERE id = :id\", \\","                                    id=session[\"user_id\"])","    ","    # create a temporary variable to store TOTAL worth ( cash + share)","    total_cash = 0","    ","    # update each symbol prices and total","    for portfolio_symbol in portfolio_symbols:","        symbol = portfolio_symbol[\"symbol\"]","        shares = portfolio_symbol[\"shares\"]","        stock = lookup(symbol)","        total = shares * stock[\"price\"]","        total_cash += total","        db.execute(\"UPDATE portfolio SET price=:price, \\","                    total=:total WHERE id=:id AND symbol=:symbol\", \\","                    price=usd(stock[\"price\"]), \\","                    total=usd(total), id=session[\"user_id\"], symbol=symbol)","    ","    # update user's cash in portfolio","    updated_cash = db.execute(\"SELECT cash FROM users \\","                               WHERE id=:id\", id=session[\"user_id\"])","    ","    # update total cash -> cash + shares worth","    total_cash += updated_cash[0][\"cash\"]","    ","    # print portfolio in index homepage","    updated_portfolio = db.execute(\"SELECT * from portfolio \\","                                    WHERE id=:id\", id=session[\"user_id\"])","                                    ","    return render_template(\"index.html\", stocks=updated_portfolio, \\","                            cash=usd(updated_cash[0][\"cash\"]), total= usd(total_cash) )","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def buy():","    \"\"\"Buy shares of stock.\"\"\"","    ","    if request.method == \"GET\":","        return render_template(\"buy.html\")","    else:","        # ensure proper symbol","        stock = lookup(request.form.get(\"symbol\"))","        if not stock:","            return apology(\"Invalid Symbol\")","        ","        # ensure proper number of shares","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","        ","        # select user's cash","        money = db.execute(\"SELECT cash FROM users WHERE id = :id\", \\","                            id=session[\"user_id\"])","        ","        # check if enough money to buy","        if not money or float(money[0][\"cash\"]) < stock[\"price\"] * shares:","            return apology(\"Not enough money\")","        ","        # update history","        db.execute(\"INSERT INTO histories (symbol, shares, price, id) \\","                    VALUES(:symbol, :shares, :price, :id)\", \\","                    symbol=stock[\"symbol\"], shares=shares, \\","                    price=usd(stock[\"price\"]), id=session[\"user_id\"])","                       ","        # update user cash               ","        db.execute(\"UPDATE users SET cash = cash - :purchase WHERE id = :id\", \\","                    id=session[\"user_id\"], \\","                    purchase=stock[\"price\"] * float(shares))","                        ","        # Select user shares of that symbol","        user_shares = db.execute(\"SELECT shares FROM portfolio \\","                           WHERE id = :id AND symbol=:symbol\", \\","                           id=session[\"user_id\"], symbol=stock[\"symbol\"])","                           ","        # if user doesn't has shares of that symbol, create new stock object","        if not user_shares:","            db.execute(\"INSERT INTO portfolio (name, shares, price, total, symbol, id) \\","                        VALUES(:name, :shares, :price, :total, :symbol, :id)\", \\","                        name=stock[\"name\"], shares=shares, price=usd(stock[\"price\"]), \\","                        total=usd(shares * stock[\"price\"]), \\","                        symbol=stock[\"symbol\"], id=session[\"user_id\"])","                        ","        # Else increment the shares count","        else:","            shares_total = user_shares[0][\"shares\"] + shares","            db.execute(\"UPDATE portfolio SET shares=:shares \\","                        WHERE id=:id AND symbol=:symbol\", \\","                        shares=shares_total, id=session[\"user_id\"], \\","                        symbol=stock[\"symbol\"])","        ","        # return to index","        return redirect(url_for(\"index\"))","        ","","@app.route(\"/history\")","@login_required","def history():","    \"\"\"Show history of transactions.\"\"\"","    histories = db.execute(\"SELECT * from histories WHERE id=:id\", id=session[\"user_id\"])","    ","    return render_template(\"history.html\", histories=histories)","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in.\"\"\"","","    # forget any user_id","    session.clear()","","    # if user reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"Must provide username\")","","        # ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"Must provide password\")","","        # query database for username","        rows = db.execute(\"SELECT * FROM users \\","                           WHERE username = :username\", \\","                           username=request.form.get(\"username\"))","","        # ensure username exists and password is correct","        if len(rows) != 1 or not pwd_context.verify(request.form.get(\"password\"), rows[0][\"hash\"]):","            return apology(\"invalid username and/or password\")","","        # remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # redirect user to home page","        return redirect(url_for(\"index\"))","","    # else if user reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out.\"\"\"","","    # forget any user_id","    session.clear()","","    # redirect user to login form","    return redirect(url_for(\"login\"))","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","    \"\"\"Get stock quote.\"\"\"","    ","    if request.method == \"POST\":","        rows = lookup(request.form.get(\"symbol\"))","        ","        if not rows:","            return apology(\"Invalid Symbol\")","            ","        return render_template(\"quoted.html\", stock=rows)","    ","    else:","        return render_template(\"quote.html\")","    ","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","    \"\"\"Register user.\"\"\"","    ","    if request.method == \"POST\":","        ","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"Must provide username\")","            ","        # ensure password was submitted    ","        elif not request.form.get(\"password\"):","            return apology(\"Must provide password\")","        ","        # ensure password and verified password is the same","        elif request.form.get(\"password\") != request.form.get(\"passwordagain\"):","            return apology(\"password doesn't match\")","        ","        # insert the new user into users, storing the hash of the user's password","        result = db.execute(\"INSERT INTO users (username, hash) \\","                             VALUES(:username, :hash)\", \\","                             username=request.form.get(\"username\"), \\","                             hash=pwd_context.encrypt(request.form.get(\"password\")))","                 ","        if not result:","            return apology(\"Username already exist\")","        ","        # remember which user has logged in","        session[\"user_id\"] = result","","        # redirect user to home page","        return redirect(url_for(\"index\"))","    ","    else:","        return render_template(\"register.html\")                ","","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():","    \"\"\"Sell shares of stock.\"\"\"","    if request.method == \"GET\":","        return render_template(\"sell.html\")","    else:","        # ensure proper symbol","        stock = lookup(request.form.get(\"symbol\"))","        if not stock:","            return apology(\"Invalid Symbol\")","        ","        # ensure proper number of shares","        try:","            shares = int(request.form.get(\"shares\"))","            if shares < 0:","                return apology(\"Shares must be positive integer\")","        except:","            return apology(\"Shares must be positive integer\")","        ","        # select the symbol shares of that user","        user_shares = db.execute(\"SELECT shares FROM portfolio \\","                                 WHERE id = :id AND symbol=:symbol\", \\","                                 id=session[\"user_id\"], symbol=stock[\"symbol\"])","        ","        # check if enough shares to sell","        if not user_shares or int(user_shares[0][\"shares\"]) < shares:","            return apology(\"Not enough shares\")","        ","        # update history of a sell","        db.execute(\"INSERT INTO histories (symbol, shares, price, id) \\","                    VALUES(:symbol, :shares, :price, :id)\", \\","                    symbol=stock[\"symbol\"], shares=-shares, \\","                    price=usd(stock[\"price\"]), id=session[\"user_id\"])","                       ","        # update user cash (increase)              ","        db.execute(\"UPDATE users SET cash = cash + :purchase WHERE id = :id\", \\","                    id=session[\"user_id\"], \\","                    purchase=stock[\"price\"] * float(shares))","                        ","        # decrement the shares count","        shares_total = user_shares[0][\"shares\"] - shares","        ","        # if after decrement is zero, delete shares from portfolio","        if shares_total == 0:","            db.execute(\"DELETE FROM portfolio \\","                        WHERE id=:id AND symbol=:symbol\", \\","                        id=session[\"user_id\"], \\","                        symbol=stock[\"symbol\"])","        # otherwise, update portfolio shares count","        else:","            db.execute(\"UPDATE portfolio SET shares=:shares \\","                    WHERE id=:id AND symbol=:symbol\", \\","                    shares=shares_total, id=session[\"user_id\"], \\","                    symbol=stock[\"symbol\"])","        ","        # return to index","        return redirect(url_for(\"index\"))","        ","@app.route(\"/loan\", methods=[\"GET\", \"POST\"])","@login_required","def loan():","    \"\"\"Get a loan.\"\"\"","    ","    if request.method == \"POST\":","        ","        # ensure must be integers","        try:","            loan = int(request.form.get(\"loan\"))","            if loan < 0:","                return apology(\"Loan must be positive amount\")","            elif loan > 1000:","                return apology(\"Cannot loan more than $1,000 at once\")","        except:","            return apology(\"Loan must be positive integer\")","            ","        # update user cash (increase)              ","        db.execute(\"UPDATE users SET cash = cash + :loan WHERE id = :id\", \\","                    loan=loan, id=session[\"user_id\"])","        ","        # return to index","        return apology(\"Loan is successful\", \"No need to pay me back\")","    ","    else:","return render_template(\"loan.html\")"],"id":38}],[{"start":{"row":0,"column":0},"end":{"row":29,"column":79},"action":"remove","lines":["from flask import Flask, redirect, render_template, request, url_for","","import helpers","from analyzer import Analyzer","","app = Flask(__name__)","","@app.route(\"/\")","def index():","    return render_template(\"index.html\")","","@app.route(\"/search\")","def search():","","    # validate screen_name","    screen_name = request.args.get(\"screen_name\", \"\")","    if not screen_name:","        return redirect(url_for(\"index\"))","","    # get screen_name's tweets","    tweets = helpers.get_user_timeline(screen_name)","","    # TODO","    positive, negative, neutral = 0.0, 0.0, 100.0","","    # generate chart","    chart = helpers.chart(positive, negative, neutral)","","    # render results","    return render_template(\"search.html\", chart=chart, screen_name=screen_name)"],"id":39}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":40},"end":{"row":9,"column":40},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1493925992000,"hash":"8e41272b10ea5b5dcf52f99c04c9ef4b27877e0a"}